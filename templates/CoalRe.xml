<beast version="2.0"
       namespace="beast.app.beauti
                 :beast.core
                 :beast.evolution.branchratemodel
                 :beast.evolution.speciation
                 :beast.evolution.tree.coalescent
                 :beast.core.util
                 :beast.evolution.nuc
                 :beast.evolution.operators
                 :beast.evolution.sitemodel
                 :beast.evolution.substitutionmodel
                 :beast.evolution.likelihood
                 :beast.evolution
                 :beast.math.distributions">

    <mergewith point="treePriorTemplates">

        <!-- Coalescent with Reassortment -->
        <subtemplate id="CoalescentWithReassortmentConstantPopulation"
                     class="coalre.util.DummyTreeDistribution"
                     mainid="CoalescentWithReassortmentDummy.t:$(n)"
                     inlineInputs="coalre.distribution.CoalescentWithReassortment.networkIntervals"
                     suppressInputs="coalre.distribution.NetworkIntervals.network">
            <![CDATA[
            <stateNode id="reassortmentRateCwR" spec="beast.core.parameter.RealParameter" value="0.1" estimate="true"/>
            <stateNode id="popSizeCwR" spec="beast.core.parameter.RealParameter" value="1.0" estimate="true"/>
            <stateNode id="binomialProbCwR" spec="beast.core.parameter.RealParameter" lower="0.0" upper="1.0" value="0.5" estimate="false"/>

            <stateNode id="networkCwR" spec="coalre.simulator.SimulatedCoalescentNetwork" nSegments="1"
                        enableSegmentTreeUpdate="false" estimate="true">
                <reassortmentRate idref="reassortmentRateCwR"/>
                <populationModel spec="beast.evolution.tree.coalescent.ConstantPopulation">
                    <popSize idref="popSizeCwR"/>
                </populationModel>

                <taxonSet spec="beast.evolution.alignment.TaxonSet" alignment="@$(n)"/>
            </stateNode>

            <prior spec="coalre.util.DummyTreeDistribution" id="CoalescentWithReassortmentDummy.t:$(n)" tree="@Tree.t:$(n)"/>

            <prior spec="coalre.distribution.CoalescentWithReassortment" id="CoalescentWithReassortmentPrior">
                <reassortmentRate idref="reassortmentRateCwR"/>
                <populationModel spec="beast.evolution.tree.coalescent.ConstantPopulation">
                    <popSize idref="popSizeCwR"/>
                </populationModel>
                <networkIntervals id="networkIntervalsCwR" spec="coalre.distribution.NetworkIntervals">
                    <network idref="networkCwR"/>
                    <binomialProb idref="binomialProbCwR"/>
                </networkIntervals>
            </prior>


            <prior id="popSizeCwRPrior" x="@popSizeCwR">
                <distr spec="OneOnX"/>
            </prior>

            <prior id="reassortmentRateCwRPrior" x="@reassortmentRateCwR">
                <distr spec="OneOnX"/>
            </prior>

            <prior id="binomialProbCwRPrior" x="@binomialProbCwR">
                <distr spec="beast.math.distributions.Uniform" lower="0" upper="1"/>
            </prior>


            <operator id="reassortmentRateCwRScale" spec="ScaleOperator"
                parameter="@reassortmentRateCwR" scaleFactor="0.5" weight="1.0"/>

            <operator id="popSizeCwRScale" spec="ScaleOperator"
                parameter="@popSizeCwR" scaleFactor="0.5" weight="1.0"/>

            <operator id="binomialProbCwRScale" spec="ScaleOperator"
                parameter="@binomialProbCwR" scaleFactor="0.5" weight="1.0"/>


            <operator id="addRemoveReassortmentCwR" spec="coalre.operators.AddRemoveReassortment"
                      network="@networkCwR" alpha="1.0" weight="1.0"/>

            <operator id="divertSegmentCwR" spec="coalre.operators.DivertSegmentOperator"
                      network="@networkCwR" weight="1.0"/>

            <operator id="uniformNetworkCwR" spec="coalre.operators.UniformNetworkNodeHeightOperator"
                      network="@networkCwR" weight="1.0"/>

            <operator id="networkScaleCwR" spec="coalre.operators.NetworkScaleOperator"
                      network="@networkCwR" weight="1.0"/>

            <operator id="networkScaleRootCwR" spec="coalre.operators.NetworkScaleOperator"
                      network="@networkCwR" scaleRootOnly="true" weight="1.0"/>
            ]]>

            <connect method="coalre.util.UpDownRemover.customConnector"/>

            <connect srcID="CoalescentWithReassortmentDummy.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="CoalescentWithReassortmentPrior" targetID="prior" inputName="distribution"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>

            <connect srcID="reassortmentRateCwRPrior" targetID="prior" inputName="distribution"
                     if="inposterior(CoalescentWithReassortmentPrior) and reassortmentRateCwR/estimate=true"/>
            <connect srcID="popSizeCwRPrior" targetID="prior" inputName="distribution"
                     if="inposterior(CoalescentWithReassortmentPrior) and popSizeCwR/estimate=true"/>
            <connect srcID="binomialProbCwRPrior" targetID="prior" inputName="distribution"
                     if="inposterior(CoalescentWithReassortmentPrior) and binomialProbCwR/estimate=true"/>

            <connect srcID="reassortmentRateCwR" targetID="state" inputName="stateNode"
                     if="inposterior(CoalescentWithReassortmentPrior) and reassortmentRateCwR/estimate=true"/>
            <connect srcID="popSizeCwR" targetID="state" inputName="stateNode"
                     if="inposterior(CoalescentWithReassortmentPrior) and popSizeCwR/estimate=true"/>
            <connect srcID="binomialProbCwR" targetID="state" inputName="stateNode"
                     if="inposterior(CoalescentWithReassortmentPrior) and binomialProbCwR/estimate=true"/>
            <connect srcID="networkCwR" targetID="state" inputName="stateNode"
                     if="inposterior(CoalescentWithReassortmentPrior)"/>

            <connect srcID="reassortmentRateCwRScale" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and reassortmentRateCwR/estimate=true"/>
            <connect srcID="popSizeCwRScale" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and popSizeCwR/estimate=true"/>
            <connect srcID="binomialProbCwRScale" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and binomialProbCwR/estimate=true"/>

            <connect srcID="addRemoveReassortmentCwR" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and networkCwR/estimate=true"/>
            <connect srcID="divertSegmentCwR" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and networkCwR/estimate=true"/>
            <connect srcID="uniformNetworkCwR" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and networkCwR/estimate=true"/>
            <connect srcID="networkScaleCwR" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and networkCwR/estimate=true"/>
            <connect srcID="networkScaleRootCwR" targetID="mcmc" inputName="operator"
                     if="inposterior(CoalescentWithReassortmentPrior) and networkCwR/estimate=true"/>

            <connect srcID="Tree.t:$(n)" targetID="addRemoveReassortmentCwR" inputName="segmentTree"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="Tree.t:$(n)" targetID="divertSegmentCwR" inputName="segmentTree"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="Tree.t:$(n)" targetID="uniformNetworkCwR" inputName="segmentTree"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="Tree.t:$(n)" targetID="networkScaleCwR" inputName="segmentTree"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="Tree.t:$(n)" targetID="networkScaleRootCwR" inputName="segmentTree"
                     if="inposterior(CoalescentWithReassortmentDummy.t:$(n)) and Tree.t:$(n)/estimate=true"/>

        </subtemplate>

    </mergewith>
</beast>


